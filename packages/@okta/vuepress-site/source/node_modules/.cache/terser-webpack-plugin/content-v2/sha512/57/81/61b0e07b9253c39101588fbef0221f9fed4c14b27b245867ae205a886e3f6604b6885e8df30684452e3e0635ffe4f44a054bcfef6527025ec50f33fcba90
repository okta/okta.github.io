{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{163:function(e,t,a){\"use strict\";a.r(t);var o={props:[\"slot-key\"],mounted:function(){this.$nextTick(function(){this.$vuepress.$emit(\"AsyncMarkdownContentMounted\",this.slotKey)})}},i=a(5),n=Object(i.a)(o,function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.slotKey}},[a(\"h1\",{attrs:{id:\"implementing-the-authorization-code-flow-with-pkce\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#implementing-the-authorization-code-flow-with-pkce\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Implementing the Authorization Code Flow with PKCE\")]),e._v(\" \"),a(\"p\",[e._v(\"If you are building a native application, then the authorization code flow with a Proof Key for Code Exchange (PKCE) is the recommended method for controlling the access between your application and a resource server.\")]),e._v(\" \"),a(\"p\",[e._v(\"The Authorization Code Flow with PKCE is the standard Code flow with an extra step at the beginning and an extra verification at the end. At a high-level, the flow has the following steps:\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"Your application generates a code verifier followed by a code challenge.\")]),e._v(\" \"),a(\"li\",[e._v(\"Your application directs the browser to the Okta Sign-In page, along with the generated code challenge, and the user authenticates.\")]),e._v(\" \"),a(\"li\",[e._v(\"Okta redirects back to your native application with an authorization code.\")]),e._v(\" \"),a(\"li\",[e._v(\"Your application sends this code, along with the code verifier, to Okta. Okta returns access and ID tokens, and optionally a refresh token.\")]),e._v(\" \"),a(\"li\",[e._v(\"Your application can now use these tokens to call the resource server (for example an API) on behalf of the user.\")])]),e._v(\" \"),a(\"p\",[e._v(\"For more information on the authorization code with PKCE flow, including why to use it, see our \"),a(\"router-link\",{attrs:{to:\"/authentication-guide/auth-overview/#authorization-code-with-pkce-flow\"}},[e._v(\"OAuth 2.0 Overview\")]),e._v(\".\")],1),e._v(\" \"),a(\"h3\",{attrs:{id:\"_1-setting-up-your-application\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-setting-up-your-application\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 1. Setting up your Application\")]),e._v(\" \"),a(\"p\",[e._v(\"You set up your OpenID Connect application inside the Okta Developer Console:\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[e._v(\"From the Applications page, choose \"),a(\"strong\",[e._v(\"Add Application\")]),e._v(\".\")]),e._v(\" \"),a(\"li\",[e._v(\"On the Create New Application page, select \"),a(\"strong\",[e._v(\"Native\")]),e._v(\".\")]),e._v(\" \"),a(\"li\",[e._v(\"Fill-in the Application Settings, then click \"),a(\"strong\",[e._v(\"Done\")]),e._v(\".\")])]),e._v(\" \"),a(\"h3\",{attrs:{id:\"_2-using-the-authorization-code-flow-with-pkce\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-using-the-authorization-code-flow-with-pkce\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 2. Using the Authorization Code Flow with PKCE\")]),e._v(\" \"),a(\"p\",[e._v(\"Just like with the regular authorization code flow, you start by making a request to your authorization server's \"),a(\"code\",[e._v(\"/authorize\")]),e._v(\" endpoint. However, in this instance you will also have to pass along a code challenge.\")]),e._v(\" \"),a(\"p\",[e._v(\"Your first step is to generate a code verifier and challenge:\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"Code verifier: Random URL-safe string with a minimum length of 43 characters.\")]),e._v(\" \"),a(\"li\",[e._v(\"Code challenge: Base64 URL-encoded SHA-256 hash of the code verifier.\")])]),e._v(\" \"),a(\"p\",[e._v(\"You'll need to add code in your native app to create the code verifier and code challenge. For examples of code that handles this, see \"),a(\"a\",{attrs:{href:\"#examples\"}},[e._v(\"below\")]),e._v(\".\")]),e._v(\" \"),a(\"p\",[e._v(\"The PKCE generator code will create output like this:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('{\\n  \"code_verifier\":\"M25iVXpKU3puUjFaYWg3T1NDTDQtcW1ROUY5YXlwalNoc0hhakxifmZHag\",\\n  \"code_challenge\":\"qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es\"\\n}\\n')])])]),a(\"p\",[e._v(\"The \"),a(\"code\",[e._v(\"code_challenge\")]),e._v(\" is a Base64-URL-encoded string of the SHA256 hash of the \"),a(\"code\",[e._v(\"code_verifier\")]),e._v(\". Your app will save the \"),a(\"code\",[e._v(\"code_verifier\")]),e._v(\" for later, and send the \"),a(\"code\",[e._v(\"code_challenge\")]),e._v(\" along with the authorization request to your authorization server's \"),a(\"code\",[e._v(\"/authorize\")]),e._v(\" URL.\")]),e._v(\" \"),a(\"p\",[e._v(\"If you are using the default Okta authorization server, then your request URL would look something like this:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"https://{yourOktaDomain}/oauth2/default/v1/authorize?client_id=0oabygpxgk9l\\nXaMgF0h7&response_type=code&scope=openid&redirect_uri=yourApp%3A%2Fcallback&st\\nate=state-8600b31f-52d1-4dca-987c-386e3d8967e9&code_challenge_method=S256&code_\\nchallenge=qjrzSW9gMiUgpUvqgEPE4_-8swvyCtfOVvg55o5S_es\\n\")])])]),a(\"p\",[e._v(\"Note the parameters that are being passed:\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[e._v(\"client_id\")]),e._v(\" matches the Client ID of your Okta OAuth application that you created above. You can find it at the bottom of your application's General tab.\")]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"response_type\")]),e._v(\" is \"),a(\"code\",[e._v(\"code\")]),e._v(\", indicating that we are using the authorization code grant type.\")]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"scope\")]),e._v(\" is \"),a(\"code\",[e._v(\"openid\")]),e._v(\", which means that the \"),a(\"code\",[e._v(\"/token\")]),e._v(\" endpoint will return an ID token. For more information about scopes, see \"),a(\"a\",{attrs:{href:\"/docs/api/resources/oidc#scopes\"}},[e._v(\"here\")]),e._v(\".\")]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"redirect_uri\")]),e._v(\" is the callback location where the user-agent will be directed to along with the \"),a(\"code\",[e._v(\"code\")]),e._v('. This must match one of the \"Login redirect URIs\" you specified when you were creating your Okta application in Step 1.')]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"state\")]),e._v(\" is an arbitrary alphanumeric string that the authorization server will reproduce when redirecting the user-agent back to the client. This is used to help prevent cross-site request forgery.\")]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"code_challenge_method\")]),e._v(\" is the hash method used to generate the challenge, which will always be \"),a(\"code\",[e._v(\"S256\")]),e._v(\".\")]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"code_challenge\")]),e._v(\" is the code challenge used for PKCE.\")])]),e._v(\" \"),a(\"p\",[e._v(\"For more information on these parameters, see \"),a(\"a\",{attrs:{href:\"/docs/api/resources/oidc#authorize\"}},[e._v(\"the OAuth 2.0 API reference\")]),e._v(\".\")]),e._v(\" \"),a(\"p\",[e._v(\"If the user does not have an existing session, this will open the Okta Sign-in Page. If they have an existing session, or after they authenticate, they will arrive at the specified \"),a(\"code\",[e._v(\"redirect_uri\")]),e._v(\" along with an authorization \"),a(\"code\",[e._v(\"code\")]),e._v(\":\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"yourApp:/callback?code=BdLDvZvO3ZfSwg-asLNk&state=state-8600b31f-52d1-4dca-\\n987c-386e3d8967e9\\n\")])])]),a(\"p\",[e._v(\"This code can only be used once, and will remain valid for 60 seconds, during which time it can be exchanged for tokens.\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"_3-exchanging-the-code-for-tokens\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-exchanging-the-code-for-tokens\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 3. Exchanging the Code for Tokens\")]),e._v(\" \"),a(\"p\",[e._v(\"To exchange this code for access and ID tokens, you pass it to your authorization server's \"),a(\"code\",[e._v(\"/token\")]),e._v(\" endpoint along with the \"),a(\"code\",[e._v(\"code_verifier\")]),e._v(\" that was generated at the beginning:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"curl --request POST \\\\\\n  --url https://{yourOktaDomain}/oauth2/default/v1/token \\\\\\n  --header 'accept: application/json' \\\\\\n  --header 'cache-control: no-cache' \\\\\\n  --header 'content-type: application/x-www-form-urlencoded' \\\\\\n  --data 'grant_type=authorization_code&client_id=0oabygpxgk9lXaMgF0h7&redirect\\n  _uri=yourApp%3A%2Fcallback&code=CKA9Utz2GkWlsrmnqehz&code_verifier=M25iVXpKU\\n  3puUjFaYWg3T1NDTDQtcW1ROUY5YXlwalNoc0hhakxifmZHag'\\n\")])])]),a(\"blockquote\",[a(\"p\",[e._v(\"Important: Unlike the regular \"),a(\"a\",{attrs:{href:\"auth-code\"}},[e._v(\"Authorization Code Flow\")]),e._v(\", this call does not require the Authorization header with the client ID and secret. This is why this version of the Authorization Code flow is appropriate for native apps.\")])]),e._v(\" \"),a(\"p\",[e._v(\"Note the parameters that are being passed:\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[e._v(\"grant_type\")]),e._v(\" is \"),a(\"code\",[e._v(\"authorization_code\")]),e._v(\", indicating that we are using the authorization code grant type.\")]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"redirect_uri\")]),e._v(\" must match the URI that was used to get the authorization code.\")]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"code\")]),e._v(\" is the authorization code that you got from the \"),a(\"code\",[e._v(\"/authorize\")]),e._v(\" endpoint.\")]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"code_verifier\")]),e._v(\" is the PKCE code verifier that your app generated at the beginning of this flow.\")])]),e._v(\" \"),a(\"p\",[e._v(\"For more information on these parameters, see the \"),a(\"a\",{attrs:{href:\"/docs/api/resources/oidc#token\"}},[e._v(\"OIDC & OAuth 2.0 API reference\")]),e._v(\".\")]),e._v(\" \"),a(\"p\",[e._v(\"If the code is still valid, and the code verifier matches, your application will receive back access and ID tokens:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('{\\n    \"access_token\": \"eyJhb[...]Hozw\",\\n    \"expires_in\": 3600,\\n    \"id_token\": \"eyJhb[...]jvCw\",\\n    \"scope\": \"openid\",\\n    \"token_type\": \"Bearer\"\\n}\\n')])])]),a(\"h3\",{attrs:{id:\"_4-next-steps\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-next-steps\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" 4. Next Steps\")]),e._v(\" \"),a(\"p\",[e._v(\"When your application passes a request with an \"),a(\"code\",[e._v(\"access_token\")]),e._v(\", the resource server will need to validate it. For more on this, see \"),a(\"a\",{attrs:{href:\"/authentication-guide/tokens/validating-access-tokens\"}},[e._v(\"Validating Access Tokens\")]),e._v(\".\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"examples\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#examples\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Examples\")]),e._v(\" \"),a(\"p\",[e._v(\"The following native application examples show the authorization code flow, as it would be implemented by a native application that needs to authenticate a user.  These are complete example applications that show the entire experience.\")]),e._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",{staticStyle:{\"text-align\":\"center\"}}),e._v(\" \"),a(\"th\",[e._v(\"Environment\")]),e._v(\" \"),a(\"th\",[e._v(\"Example Repository\")])])]),e._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[a(\"i\",{staticClass:\"icon code-android-32\"})]),e._v(\" \"),a(\"td\",[e._v(\"Android\")]),e._v(\" \"),a(\"td\",[a(\"a\",{attrs:{href:\"https://github.com/okta/okta-sdk-appauth-android\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"https://github.com/okta/okta-sdk-appauth-android\"),a(\"OutboundLink\")],1)])]),e._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[a(\"i\",{staticClass:\"icon code-ios-32\"})]),e._v(\" \"),a(\"td\",[e._v(\"iOS\")]),e._v(\" \"),a(\"td\",[a(\"a\",{attrs:{href:\"https://github.com/okta/okta-sdk-appauth-ios\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"https://github.com/okta/okta-sdk-appauth-ios\"),a(\"OutboundLink\")],1)])])])])])},[],!1,null,null,null);n.options.__file=\"index.md\";t.default=n.exports}}]);","extractedComments":[]}